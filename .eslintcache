[{"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\index.jsx":"1","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\reportWebVitals.js":"2","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\GlobalPage.jsx":"3","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\card-library\\CardLibrary.jsx":"4","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\home\\Home.jsx":"5","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\deck-builder\\DeckBuilder.jsx":"6","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\decks\\Decks.jsx":"7","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\utils\\api\\calls.js":"8","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Navigation.jsx":"9","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\TradingCard.jsx":"10","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Button.jsx":"11","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Mana.jsx":"12","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Heart.jsx":"13","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Sword.jsx":"14","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Gem.jsx":"15","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\play\\Play.jsx":"16","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\quickplay\\Quickplay.jsx":"17"},{"size":1767,"mtime":1612751916411,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1608659481000,"results":"20","hashOfConfig":"19"},{"size":356,"mtime":1610874393000,"results":"21","hashOfConfig":"19"},{"size":796,"mtime":1611032137000,"results":"22","hashOfConfig":"19"},{"size":337,"mtime":1610874162000,"results":"23","hashOfConfig":"19"},{"size":10888,"mtime":1612749306055,"results":"24","hashOfConfig":"19"},{"size":6290,"mtime":1612776130590,"results":"25","hashOfConfig":"19"},{"size":233,"mtime":1611022543000,"results":"26","hashOfConfig":"19"},{"size":1981,"mtime":1612749241135,"results":"27","hashOfConfig":"19"},{"size":2960,"mtime":1610957769000,"results":"28","hashOfConfig":"19"},{"size":444,"mtime":1611028255000,"results":"29","hashOfConfig":"19"},{"size":777,"mtime":1610957188000,"results":"30","hashOfConfig":"19"},{"size":1883,"mtime":1610957281000,"results":"31","hashOfConfig":"19"},{"size":2019,"mtime":1610957295000,"results":"32","hashOfConfig":"19"},{"size":3500,"mtime":1610956453000,"results":"33","hashOfConfig":"19"},{"size":1025,"mtime":1612869442313,"results":"34","hashOfConfig":"19"},{"size":1107,"mtime":1612776149322,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"yfj8jw",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\index.jsx",[],["79","80"],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\GlobalPage.jsx",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\card-library\\CardLibrary.jsx",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\home\\Home.jsx",["81"],"import React from 'react';\nimport { Navigation } from '../../components/Navigation';\n// import './home.css';\n\nexport const Home = () => {\n    return <div className='custom-styles'></div>;\n};\n\n// background: #f8ff45;\n// color: #1f1f1f;\n// margin: 300px;\n// padding: 8px 24px;\n// font-weight: 600;\n// border-radius: 5px;\n// outline: none;\n","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\deck-builder\\DeckBuilder.jsx",["82","83"],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Button } from '../../components/Button';\nimport { Mana } from '../../components/Mana';\nimport { TradingCard } from '../../components/TradingCard';\nimport { doCall } from '../../utils/api/calls';\n\nexport const DeckBuilder = (props) => {\n    const { id } = useParams();\n    const [cards, setCards] = useState([]);\n    const [deckList, setDeckList] = useState([]);\n    const [deckListCounter, setDeckListCounter] = useState({});\n    // const [manaSpread, setManaSpread] = useState({ 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0 });\n\n    const cardsInDeck = Object.values(deckListCounter).reduce(\n        (a, b) => a + b,\n        0\n    );\n    // const totalMana = Object.values(manaSpread).reduce((a, b) => a + b, 0);\n\n    useEffect(() => {\n        debugger;\n\n        doCall('http://localhost:5000/cards').then((res) => {\n            setCards(res.data);\n        });\n        if (id) {\n            doCall(`http://localhost:5000/decks/${id}`).then((res) => {\n                setCards(res.data);\n            });\n        } else {\n            // const opts = {\n            //     params: e\n            //         id: param,\n            //     },\n            // };\n        }\n        return () => {};\n    }, []);\n\n    const handleAddToDeck = (card) => {\n        if (cardsInDeck < 30) {\n            if (deckListCounter[card._id]) {\n                if (deckListCounter[card._id] < 2) {\n                    const count = deckListCounter[card._id] + 1;\n                    setDeckListCounter({\n                        ...deckListCounter,\n                        [card._id]: count,\n                    });\n\n                    // const manaCounter = manaSpread[card.mana] + 1;\n                    // setManaSpread({ ...manaSpread, [card.mana]: manaCounter });\n                }\n            } else {\n                setDeckListCounter({ ...deckListCounter, [card._id]: 1 });\n                setDeckList([...deckList, card]);\n\n                // if (manaSpread[card.mana]) {\n                //     const manaCounter = manaSpread[card.mana] + 1;\n                //     setManaSpread({ ...manaSpread, [card.mana]: manaCounter });\n                // } else {\n                //     setManaSpread({ ...manaSpread, [card.mana]: 1 });\n                // }\n            }\n        }\n    };\n\n    const removeFromDeck = (card) => {\n        if (deckListCounter[card._id]) {\n            if (\n                deckListCounter[card._id] > 0 &&\n                deckListCounter[card._id] <= 2\n            ) {\n                const count = deckListCounter[card._id] - 1;\n                setDeckListCounter({ ...deckListCounter, [card._id]: count });\n            }\n\n            if (deckListCounter[card._id] === 1) {\n                const newArr = [];\n                deckList.forEach((element) => {\n                    if (element._id !== card._id) {\n                        newArr.push(element);\n                    }\n                });\n                setDeckList(newArr);\n            }\n            // if (manaSpread[card.mana]) {\n            //     if (manaSpread[card.mana] > 0) {\n            //         const manaCounter = manaSpread[card.mana] - 1;\n            //         setManaSpread({ ...manaSpread, [card.mana]: manaCounter });\n            //     }\n            // }\n        }\n    };\n\n    const handleSaveDeck = () => {\n        doCall('http://localhost:5000/decks', {\n            data: {\n                name: 'test',\n                cards: ['60040163fa69ed68329eedbf', '6004b67016b41e01eaa8138e'],\n            },\n            method: 'POST',\n        }).then((res) => {});\n    };\n\n    return (\n        <div>\n            <div className='flex'>\n                <div\n                    className='ml-3 mr-5 p-3 bg-medium-blue rounded flex flex-col justify-between'\n                    style={{\n                        minWidth: '300px',\n                        maxHeight: 'calc(100vh - 135px)',\n                    }}\n                >\n                    <div>\n                        <div className='p-2 bg-dark-blue rounded'>\n                            <div className=''>{cardsInDeck} / 30</div>\n                            {/* <div className='flex justify-center relative' style={{ height: '150px' }}>\n                                <div className=' flex bg-mana rounded absolute' style={{ height: `${(manaSpread[10] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[9] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 10 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[8] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 20 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[7] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 30 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[6] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 40 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[5] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 50 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[4] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 60 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[3] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 70 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[2] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 80 }}></div>\n                                <div className=' flex bg-mana rounded absolute ml-1' style={{ height: `${(manaSpread[1] / totalMana) * 100 || 5}%`, width: '5px', bottom: 0, right: 90 }}></div>\n                            </div> */}\n                        </div>\n                        <div className='bg-medium-blue '>\n                            {deckList.map((card, i) => {\n                                return (\n                                    <div\n                                        key={`${card._id}-${i}`}\n                                        className='flex items-center'\n                                    >\n                                        <div\n                                            onClick={() => removeFromDeck(card)}\n                                            className='w-full bg-dark-blue rounded flex items-center mt-2 cursor-pointer no-select'\n                                        >\n                                            <img\n                                                className='object-cover rounded-l'\n                                                style={{\n                                                    width: '30px',\n                                                    height: '30px',\n                                                }}\n                                                src={\n                                                    '/' +\n                                                    card.imagePath.split(\n                                                        '.'\n                                                    )[0] +\n                                                    '-tooltip' +\n                                                    '.' +\n                                                    card.imagePath.split('.')[1]\n                                                }\n                                            />\n                                            <div className='w-full flex justify-between px-2'>\n                                                <div className='flex items-center'>\n                                                    <div className=''>\n                                                        {\n                                                            deckListCounter[\n                                                                card._id\n                                                            ]\n                                                        }\n                                                        x\n                                                    </div>\n                                                    <div className='ml-2 text-white'>\n                                                        {card.name}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div\n                                                className='flex items-center px-2 '\n                                                style={{ height: '30px' }}\n                                            >\n                                                <div>{card.mana}</div>\n                                                <div className='ml-1'>\n                                                    <Mana />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                    <Button onClick={handleSaveDeck}>Save Deck</Button>\n                </div>\n                <div\n                    className='flex flex-wrap overflow-y-scroll mr-3'\n                    style={{\n                        minWidth: '250px',\n                        maxHeight: 'calc(100vh - 135px)',\n                    }}\n                >\n                    {cards.map((card) => {\n                        return (\n                            <div\n                                onClick={() => handleAddToDeck(card)}\n                                key={card._id}\n                                className={`mb-5 mr-5 ${\n                                    deckListCounter[card._id] === 2 ||\n                                    cardsInDeck === 30\n                                        ? 'opacity-30'\n                                        : ''\n                                }`}\n                            >\n                                <TradingCard hoverable={true} card={card} />\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\decks\\Decks.jsx",["84"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '../../components/Button';\nimport { TradingCard } from '../../components/TradingCard';\nimport { doCall } from '../../utils/api/calls';\n\nexport const Decks = () => {\n    const [decks, setDecks] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        doCall('http://localhost:5000/decks').then((res) => {\n            setDecks(res.data.data);\n            setIsLoaded(true);\n        });\n        return () => {};\n    }, []);\n\n    return (\n        // <div>\n        //     {isLoaded ? (\n        //         <div className='flex justify-center'>\n        //             <div className='bg-medium-blue rounded p-5 inline-block'>\n        //                 <div className='flex flex-col items-center'>\n        //                     {decks.length === 0 ? (\n        //                         <div>\n        //                             <h1 className='text-3xl'>You do not have any decks created yet.</h1>\n        //                         </div>\n\n        //                     ) : (\n        //                         <div>\n        //                             <div>\n        //                                 <h1 className=''>Your Decks</h1>\n        //                             </div>\n\n        //                             <div className='mt-5'>\n        //                                 <Link to='deck-builder/create'>\n        //                                     <Button>Create a New Deck</Button>\n        //                                 </Link>\n        //                                 <div className='flex flex-wrap justify-center'>\n        //                                     {/* {cards.map((card) => {\n        //                     return (\n        //                         <div key={card._id} className='m-3'>\n        //                         <TradingCard card={card} />\n        //                         </div>\n        //                         );\n        //                     })} */}\n        //                                 </div>\n        //                             </div>\n        //                         </div>\n        //                     )}\n\n        //     ) : (\n        //         <div></div>\n        //     )}\n        // </div>\n        <div>\n            {isLoaded ? (\n                <div>\n                    {decks.length === 0 ? (\n                        <div className='flex justify-center'>\n                            <div className='bg-medium-blue rounded p-5 inline-block'>\n                                <div className='flex flex-col items-center'>\n                                    <div>\n                                        <h1 className='text-3xl'>\n                                            You do not have any decks created\n                                            yet.\n                                        </h1>\n                                    </div>\n                                    <div className='mt-5'>\n                                        <Link to='deck-builder/create'>\n                                            <Button>Create a New Deck</Button>\n                                        </Link>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <div>\n                            <div className='flex'>\n                                <div className='ml-3 w-1/4'>\n                                    <div className='w-full bg-medium-blue rounded p-5 inline-block'>\n                                        <div className='flex flex-col items-center'>\n                                            <div className='text-xl text-center'>\n                                                Create a new deck from scratch\n                                            </div>\n                                            <div className='mt-5'>\n                                                <Link to='deck-builder/create'>\n                                                    <Button>Create Deck</Button>\n                                                </Link>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                {console.log(decks)}\n                                {decks.map((deck) => (\n                                    <div className='ml-3 w-1/4'>\n                                        <div className='w-full bg-medium-blue rounded p-5 inline-block h-full'>\n                                            <div className='flex flex-col items-center justify-between h-full'>\n                                                <div\n                                                    className='text-xl'\n                                                    key={deck._id}\n                                                >\n                                                    {deck.name}\n                                                </div>\n                                                <div className='mt-5 text-gold'>\n                                                    <Link\n                                                        to={`deck-builder/${deck._id}`}\n                                                    >\n                                                        <Button\n                                                            type={'secondary'}\n                                                        >\n                                                            Edit Deck\n                                                        </Button>\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            ) : (\n                <div></div>\n            )}\n        </div>\n    );\n};\n","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\utils\\api\\calls.js",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Navigation.jsx",["85","86"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { doCall } from '../utils/api/calls';\nimport { Button } from './Button';\n\nexport const Navigation = () => {\n    return (\n        <div className='container mx-auto py-3'>\n            <div className='flex justify-between items-center'>\n                <div>\n                    <ul className='flex'>\n                        {/* <li className='p-3'>\n                            <Link to={'/card-library'}> Card Library</Link>\n                        </li> */}\n                        <li className='p-3'>\n                            <Link to={'/decks'}> Deck Builder</Link>\n                        </li>\n                        {/* <li className='ml-2 p-3'>\n                            <Link to={'/boosters'}>Buy Booster Packs</Link>\n                        </li>\n                        <li className='ml-2 p-3'>\n                            <Link to={'/auction'}>Player Auction House</Link>\n                        </li> */}\n                        <li className='ml-2 p-3'>\n                            <Link to={'/play'}>Play</Link>\n                        </li>\n                    </ul>\n                </div>\n                <div className='mr-3 flex'>\n                    <div\n                        className='text-gold'\n                        onClick={() =>\n                            (window.location.href =\n                                'http://localhost:5000/auth/google')\n                        }\n                    >\n                        Sign In With Google\n                    </div>\n                    <div\n                        onClick={() =>\n                            (window.location.href =\n                                'http://localhost:5000/auth/logout')\n                        }\n                        className='ml-3'\n                    >\n                        Sign Out\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\TradingCard.jsx",["87","88","89","90","91","92","93","94"],"import React, { useState } from 'react';\nimport { Gem } from './Gem';\nimport { Heart } from './Heart';\nimport { Mana } from './Mana';\nimport { Sword } from './Sword';\n\nexport const TradingCard = ({ card, hoverable }) => {\n    const [baseAttack, setMaxAttack] = useState(card.attack);\n    const [attack, setAttack] = useState(card.attack);\n    const [baseHealth, setBaseHealth] = useState(card.health);\n    const [health, setHealth] = useState(card.health);\n\n    const [mana, setMana] = useState(card.mana);\n\n    let cardBGColor = '#aaaaaa';\n\n    return (\n        <div className={`no-select p-2 rounded text-white ${hoverable && 'cursor-pointer'}`} style={{ width: '250px', background: cardBGColor }}>\n            <div className='flex justify-between bg-background-primary p-2 rounded-t'>\n                <div>{card.name}</div>\n                <div className='flex items-center'>\n                    <div className='flex items-center'>\n                        <div style={{ filter: 'drop-shadow(0px 0px 3px #2890f3)' }}>\n                            <Mana />\n                        </div>\n                        <div className='ml-2 text-xl'>{mana}</div>\n                    </div>\n                </div>\n            </div>\n\n            <div>\n                <div className='relative'>\n                    <div>\n                        <img className='object-cover' style={{ width: '100%', height: '150px' }} src={'/' + card.imagePath} />\n                    </div>\n                    <div>\n                        <div className='absolute p-1 -ml-1 bg-dark-blue rounded-full' style={{ top: '100%', left: '50%', transform: 'translate(0px, -50%)' }}>\n                            <Gem rank={card.rank} />\n                        </div>\n                    </div>\n                </div>\n                <div className='w-100 bg-background-primary flex justify-between rounded-b' style={{ height: '100px' }}>\n                    <div className='p-2 pt-3 font-medium text-sm text-center'>{card.description}</div>\n                </div>\n                <div className='bg-background-primary rounded mt-2'>\n                    <div className='p-2 flex justify-between'>\n                        <div className='flex items-center'>\n                            <div style={{ filter: 'drop-shadow(0px 0px 2px #ff0)' }}>\n                                <Sword />\n                            </div>\n                            <div className='ml-2 text-xl'>{attack}</div>\n                        </div>\n                        <div>{card.model}</div>\n                        <div className='flex items-center'>\n                            <div style={{ filter: 'drop-shadow(0px 0px 3px #f00)' }}>\n                                <Heart />\n                            </div>\n                            <div className='ml-2 text-xl'>{health}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Button.jsx",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Mana.jsx",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Heart.jsx",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Sword.jsx",[],["95","96"],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\components\\Gem.jsx",[],"C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\play\\Play.jsx",["97","98"],"import React, { useState } from 'react';\r\nimport { Link, Redirect, useHistory } from 'react-router-dom';\r\nimport { Button } from '../../components/Button';\r\nimport { doCall } from '../../utils/api/calls';\r\n\r\nexport const Play = () => {\r\n    const history = useHistory();\r\n    const [findingMatch, setFindingMatch] = useState(false);\r\n\r\n    const findMatch = () => {\r\n        setFindingMatch(true);\r\n        doCall('http://localhost:5000/play/quickplay').then((res) => {\r\n            console.log(res);\r\n            history.push(`/quickplay/${res.data.data.redirectId}`);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className='flex'>\r\n                {/* <div className='mb-3'>Choose deck</div> */}\r\n                <div>\r\n                    <div>\r\n                        <Button onClick={findMatch}>Quick Play</Button>\r\n                    </div>\r\n                    <div>{findingMatch && <div>Finding match...</div>}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\rob\\Desktop\\tcg\\tcg_frontend\\src\\pages\\quickplay\\Quickplay.jsx",["99"],"import React, { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useParams } from 'react-router-dom';\r\nimport { doCall } from '../../utils/api/calls';\r\nimport { Button } from '../../components/Button';\r\n\r\nconst socket = io.connect('http://localhost:5000');\r\n\r\nexport const Quickplay = () => {\r\n    const [gameState, setGameState] = useState({});\r\n    const { id } = useParams();\r\n\r\n    const room = id;\r\n\r\n    useEffect(() => {\r\n        doCall(`http://localhost:5000/play/quickplay/${room}`).then((res) => {\r\n            // setCards(res.data);\r\n            socket.on('connect', function () {\r\n                socket.emit('quickplay', room);\r\n            });\r\n\r\n            socket.on('getGameState', function (data) {\r\n                setGameState(data);\r\n            });\r\n        });\r\n\r\n        return () => {};\r\n    }, []);\r\n    return (\r\n        <div>\r\n            {console.log(gameState)}\r\n\r\n            <div>\r\n                <Button>1</Button>\r\n                <Button>2</Button>\r\n                <Button>3</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":39,"column":8,"nodeType":"110","endLine":39,"endColumn":10,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":143,"column":45,"nodeType":"114","endLine":158,"endColumn":47},{"ruleId":"104","severity":1,"message":"115","line":4,"column":10,"nodeType":"106","messageId":"107","endLine":4,"endColumn":21},{"ruleId":"104","severity":1,"message":"116","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":16},{"ruleId":"104","severity":1,"message":"117","line":4,"column":10,"nodeType":"106","messageId":"107","endLine":4,"endColumn":16},{"ruleId":"104","severity":1,"message":"118","line":8,"column":12,"nodeType":"106","messageId":"107","endLine":8,"endColumn":22},{"ruleId":"104","severity":1,"message":"119","line":8,"column":24,"nodeType":"106","messageId":"107","endLine":8,"endColumn":36},{"ruleId":"104","severity":1,"message":"120","line":9,"column":20,"nodeType":"106","messageId":"107","endLine":9,"endColumn":29},{"ruleId":"104","severity":1,"message":"121","line":10,"column":12,"nodeType":"106","messageId":"107","endLine":10,"endColumn":22},{"ruleId":"104","severity":1,"message":"122","line":10,"column":24,"nodeType":"106","messageId":"107","endLine":10,"endColumn":37},{"ruleId":"104","severity":1,"message":"123","line":11,"column":20,"nodeType":"106","messageId":"107","endLine":11,"endColumn":29},{"ruleId":"104","severity":1,"message":"124","line":13,"column":18,"nodeType":"106","messageId":"107","endLine":13,"endColumn":25},{"ruleId":"112","severity":1,"message":"113","line":34,"column":25,"nodeType":"114","endLine":34,"endColumn":127},{"ruleId":"100","replacedBy":"125"},{"ruleId":"102","replacedBy":"126"},{"ruleId":"104","severity":1,"message":"127","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":14},{"ruleId":"104","severity":1,"message":"128","line":2,"column":16,"nodeType":"106","messageId":"107","endLine":2,"endColumn":24},{"ruleId":"108","severity":1,"message":"129","line":28,"column":8,"nodeType":"110","endLine":28,"endColumn":10,"suggestions":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'Navigation' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["133"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TradingCard' is defined but never used.","'doCall' is defined but never used.","'Button' is defined but never used.","'baseAttack' is assigned a value but never used.","'setMaxAttack' is assigned a value but never used.","'setAttack' is assigned a value but never used.","'baseHealth' is assigned a value but never used.","'setBaseHealth' is assigned a value but never used.","'setHealth' is assigned a value but never used.","'setMana' is assigned a value but never used.",["131"],["132"],"'Link' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'room'. Either include it or remove the dependency array.",["134"],"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [id]",{"range":"139","text":"140"},"Update the dependencies array to be: [room]",{"range":"141","text":"142"},[1318,1320],"[id]",[857,859],"[room]"]